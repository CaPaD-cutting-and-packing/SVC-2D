[BL        ] 
fImproved    1        // Choose left/right justification acc. to area
pInvertShove 0      0.03    // Probability min/max to invert this rule

[Solver      ] 
instFirst      1        // The first instance in a data file (count from 1)
instLast       1000000   // The last instance in a data file
statPeriod     10       // GROUPING: for how many instances, averages are calculated and reset and printed to !!stat.txt
fWriteSolution 0        // Write solution of the last instance to a file

[Sub_2DSPP   ] 
nScaleW        0        // vscale0 = min{wi/di | I0} : W/max{di | I_0} : W0/max{di | I_0} (nScaleW = 0,1,2)
vsp            -0.8   0.5    // multiply the 2D portion of KP values by the_vscale*di*vscale0, where the_vscale = 10^(RndUniform(vsp2-vsp1)) set in each run
pTower         0      0    // probability min-max that holes are filled not monotonously by heights but like a tower in an iteration
pChangeP_TIP   0.01     // probability to change either pTower or pInvertHole or pPermutateHole in an iteration (independently)
pInvertHole    0      0.05    // probability min/max that we invert the chosen item ordering/shove direction. Other defaults?
pPermutateHole 0.8    1    // probability min/max that all knapsack-filled holes will be Kendal-Tau permutated in an iteration
pBubbleHole    0.6    0.9    // probability min-max for bubble selection in Kendall-Tau sequence modification

[SVC_2DSPP ] 
MaxTime      760    
MaxIter      1e+100 
NIterRandom  0        // Number of random (BLR) iterations in a cycle (first). But pseudo-values are corrected too if nIterSVC>0. What about random periods?
NIterSVC     1        // Number of SVC iter in a cycle, at least 100 recommended if mixed with random. (?)
ValReset     1000   19000    // How often the values are reset to item areas: min/max of the waiting interval
blockw_pow   2.1    0.1    // MEAN, STDDEV: overprop-ty (power) of the local item area in each block in correction
p_bwpnew     0.1      // Probability to regenerate blockw_pow in an iteration
BaseOrdering 2      1 1 1    // When constructing a random priority list, take a perturbation of falling: (1. height, 2. area, 3. width, 4. perim.) with these rel. frequencies, corresp.-ly
p_choose     0.6    0.6    // min, max of the probability to choose a swap when perturbating an ordering; generated once for every ordering

